     1                                  ;windows calling convention!!!!
     2                                  ;default rel ;linux attempt
     3                                  
     4                                  ;extern malloc
     5                                  
     6                                  
     7                                  section .text
     8                                  global x86_sqrt
     9                                  global x86_prime_list
    10                                  ;extern malloc ;linux attempt
    11                                  
    12                                  ;if u refactor this make sure to check x86_prime_list that u didnt take too many registers
    13                                  x86_sqrt:
    14                                      ; Assume input x is in rcx
    15 00000000 4885C9                      test rcx, rcx         ; Check if input is zero
    16 00000003 743B                        jz   ret_0 ; Handle the case where input is zero to avoid undefined behavior
    17 00000005 4889CE                      mov rsi,rcx
    18                                  
    19                                      ; Calculate the maximum possible shift (log2(x))/2
    20 00000008 480FBDC9                    bsr rcx, rcx            ; Index of highest set bit in rcx
    21 0000000C 48D1E9                      shr rcx, 1              ;(log2(x))/2
    22                                  
    23                                      ; Set starting point to 2^rcx
    24 0000000F 41B801000000                mov r8, 1  ;1
    25 00000015 49D3E0                      shl r8, cl ;2^cl (since log2(x)<256 cx fits in cl)
    26                                  
    27                                      ; Set starting point
    28 00000018 4831C9                      xor rcx, rcx
    29 0000001B EB0F                        jmp binary_search_start
    30                                      
    31 0000001D 90<rep 3h>                  align 16
    32                                      binary_search_undo:
    33 00000020 4C29C1                          sub rcx, r8 ;undo the last rcx+=r8
    34                                      binary_search_inc:	
    35 00000023 49D1E8                      	shr r8, 1 ;r8=r8/2
    36 00000026 4983F800                    	cmp r8,0 ;if r8=0 the loop wont change we are done
    37 0000002A 7410                            jz end_binary_search
    38                                      binary_search_start:
    39 0000002C 4C01C1                          add rcx, r8 ;rax+=r8
    40                                  
    41 0000002F 4889C8                          mov rax, rcx
    42 00000032 48F7E0                          mul rax ;rax=rcx^2
    43 00000035 4839C6                          cmp rsi, rax        ; Compare the original x with the square of the current guess
    44 00000038 77E9                            ja binary_search_inc ;wont triger
    45 0000003A 72E4                            jb binary_search_undo ;wont triger
    46                                      	
    47                                      end_binary_search:
    48 0000003C 4889C8                          mov rax,rcx
    49 0000003F C3                              ret
    50                                      
    51                                      ret_0:
    52 00000040 4831C0                          xor rax, rax        ; If input is zero, return zero
    53 00000043 C3                              ret
    54                                  
    55                                  x86_prime_list:
    56 00000044 54                      	push rsp
    57 00000045 4154                    	push r12 ;counter
    58 00000047 57                      	push rdi
    59                                  	
    60                                  
    61                                  
    62 00000048 4889E7                  	mov rdi,rsp ;keep base so we can work.
    63                                  
    64 0000004B 4989CA                  	mov r10,rcx ;r10 holds the number
    65                                  
    66 0000004E 4D31E4                  	xor r12,r12 ;number of factors
    67                                  
    68                                  	;check 2
    69 00000051 480FBDC9                	bsr rcx, rcx
    70 00000055 741C                    	jz check_3
    71 00000057 49D3EA                  	shr r10,cl
    72                                  
    73 0000005A 41FEC4                  	inc r12b
    74                                  	;write [2 u64, rcx u8]
    75 0000005D 4883EC09                	sub rsp, 9           
    76 00000061 48C744240102000000      	mov qword [rsp+1], 2
    77 0000006A 880C24                  	mov  [rsp], cl ;needs to be 1 byte only
    78                                  	
    79                                  
    80                                  	;same logic for 3 now we need div
    81 0000006D 41B803000000            	mov r8,3
    82                                  	check_3:
    83                                  	;divide by 3
    84 00000073 4C89D0                  	mov rax,r10
    85 00000076 4831D2                  	xor rdx,rdx
    86 00000079 49F7F0                  	div r8;	
    87 0000007C 4885D2                  	test rdx,rdx
    88 0000007F 7434                    	jz setup_6_loop
    89                                  
    90                                  	
    91                                  	;done in loop anyway ;mov r10,rax
    92 00000081 41FEC4                  	inc r12b
    93                                  
    94 00000084 4883EC09                	sub rsp, 9           
    95 00000088 48C744240103000000      	mov qword [rsp+1], 3
    96 00000091 4831C9                  	xor rcx,rcx ;rcx holds the current div count
    97                                  
    98 00000094 90<rep Ch>              	align 16
    99                                  	loop_3:
   100 000000A0 4989C2                  		mov r10,rax
   101 000000A3 4883C101                		add rcx,1
   102 000000A7 4831D2                  		xor rdx,rdx
   103 000000AA 49F7F0                  		div r8;	
   104 000000AD 4885D2                  		test rdx,rdx
   105 000000B0 74EE                    		jz loop_3
   106                                  
   107 000000B2 880C24                  	mov  [rsp], cl
   108                                  
   109                                  	setup_6_loop:
   110 000000B5 4C89D1                  	mov rcx,r10
   111 000000B8 E843FFFFFF              	call x86_sqrt
   112 000000BD 4989C1                  	mov r9,rax ;now we have a cap
   113                                  
   114 000000C0 4D31C0                  	xor r8,r8
   115                                  	;jmp main_loop
   116                                  
   117 000000C3 90<rep Dh>              	align 16
   118                                  	main_loop:
   119 000000D0 4983C005                	add r8,5 ;r8 holds our dividsor
   120                                  
   121 000000D4 4D39C1                  	cmp r9,r8
   122 000000D7 7E05                    	jng return
   123 000000D9 4D39C2                  	cmp r10,r8
   124 000000DC 7332                    	jae check_6k_m
   125                                  	
   126                                  	return:
   127 000000DE 4829E7                  		sub rdi,rsp
   128                                  		call malloc
   128          ******************       error: symbol `malloc' not defined
   129                                  		;our return pointer is in rax like we need it to
   130 000000E1 4885C0                  		test rax,rax
   131 000000E4 741E                    		jz err_return
   132                                  		
   133                                  		;setup rdx for the return
   134 000000E6 4C89E2                  		mov rdx,r12
   135                                  
   136                                  		;memcpy the stack into the malloced memory
   137                                  		;we will and at ;add rdi,rsp ;our base pointer
   138                                  		
   139 000000E9 4889E6                  		mov rsi, rsp 
   140 000000EC 4889C7                  		mov rdi, rax
   141                                  
   142 000000EF 4C89E1                  		mov rcx, r12
   143 000000F2 F3A4                    		rep movsb
   144 000000F4 4C89E1                  		mov rcx, r12
   145 000000F7 F348A5                  		rep movsq
   146                                  
   147 000000FA 4889F4                  		mov rsp,rsi
   148 000000FD EB0C                    		jmp general_return
   149                                  
   150                                  	err_return:
   151                                  		;reset stack 8+8+8=24
   152 000000FF 4801E7                  		add rdi,rsp ;undo our subtruction
   153 00000102 488D67E8                		lea rsp,[rdi-24]
   154                                  
   155                                  	general_return:
   156 00000106 5F                      		pop rdi
   157 00000107 415C                    		pop r12
   158 00000109 5C                      		pop rsp
   159 0000010A C3                      		ret
   160                                  
   161                                  	check_6k_m:
   162                                  		;divide by r8
   163 0000010B 4C89D0                  		mov rax,r10
   164 0000010E 4831D2                  		xor rdx,rdx
   165 00000111 49F7F0                  		div r8;	
   166 00000114 4885D2                  		test rdx,rdx
   167 00000117 743C                    		jz check_6k_p
   168                                  
   169                                  		
   170                                  		;done in loop anyway ;mov r10,rax
   171 00000119 41FEC4                  		inc r12b
   172                                  
   173 0000011C 4883EC09                		sub rsp, 9           
   174 00000120 48C744240103000000      		mov qword [rsp+1], 3
   175 00000129 4831C9                  		xor rcx,rcx ;rcx holds the current div count
   176                                  
   177 0000012C 90<rep 4h>              		align 16
   178                                  		loop_6k_m:
   179 00000130 4989C2                  			mov r10,rax
   180 00000133 4883C101                			add rcx,1
   181 00000137 4831D2                  			xor rdx,rdx
   182 0000013A 49F7F0                  			div r8;	
   183 0000013D 4885D2                  			test rdx,rdx
   184 00000140 74EE                    			jz loop_6k_m
   185                                  
   186 00000142 880C24                  		mov  [rsp], cl
   187                                  
   188                                  
   189                                  	check_6k_p:
   190 00000145 4983C002                		add r8,2 ;moving to the + case
   191                                  		;divide by r8
   192 00000149 4C89D0                  		mov rax,r10
   193 0000014C 4831D2                  		xor rdx,rdx
   194 0000014F 49F7F0                  		div r8;	
   195 00000152 4885D2                  		test rdx,rdx
   196 00000155 0F8475FFFFFF            		jz main_loop
   197                                  
   198                                  		
   199                                  		;done in loop anyway ;mov r10,rax
   200 0000015B 41FEC4                  		inc r12b
   201                                  
   202 0000015E 4883EC09                		sub rsp, 9           
   203 00000162 48C744240103000000      		mov qword [rsp+1], 3
   204 0000016B 4831C9                  		xor rcx,rcx ;rcx holds the current div count
   205                                  
   206 0000016E 90<rep 2h>              		align 16
   207                                  		loop_6k_p:
   208 00000170 4989C2                  			mov r10,rax
   209 00000173 4883C101                			add rcx,1
   210 00000177 4831D2                  			xor rdx,rdx
   211 0000017A 49F7F0                  			div r8;	
   212 0000017D 4885D2                  			test rdx,rdx
   213 00000180 74EE                    			jz loop_6k_p
   214                                  
   215 00000182 880C24                  		mov  [rsp], cl
   216 00000185 E946FFFFFF              		jmp main_loop
   217                                  
   218                                  
   219                                  
